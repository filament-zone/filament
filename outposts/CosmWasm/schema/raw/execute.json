{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_campaign_msg"
      ],
      "properties": {
        "create_campaign_msg": {
          "type": "object",
          "required": [
            "admin",
            "attester",
            "conversion_desc",
            "ends_at",
            "indexer",
            "payout_mech",
            "segment_desc"
          ],
          "properties": {
            "admin": {
              "$ref": "#/definitions/Addr"
            },
            "attester": {
              "$ref": "#/definitions/Addr"
            },
            "conversion_desc": {
              "$ref": "#/definitions/ConversionDesc"
            },
            "ends_at": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "indexer": {
              "$ref": "#/definitions/Addr"
            },
            "payout_mech": {
              "$ref": "#/definitions/PayoutMechanism"
            },
            "segment_desc": {
              "$ref": "#/definitions/SegmentDesc"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "fund_campaign_msg"
      ],
      "properties": {
        "fund_campaign_msg": {
          "type": "object",
          "required": [
            "budget",
            "id"
          ],
          "properties": {
            "budget": {
              "$ref": "#/definitions/CampaignBudget"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_status_indexing_msg"
      ],
      "properties": {
        "set_status_indexing_msg": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_segment_msg"
      ],
      "properties": {
        "register_segment_msg": {
          "type": "object",
          "required": [
            "id",
            "size"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "size": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_conversions_msg"
      ],
      "properties": {
        "register_conversions_msg": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "who"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "who": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "finalize_campaign_msg"
      ],
      "properties": {
        "finalize_campaign_msg": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_incentives_msg"
      ],
      "properties": {
        "claim_incentives_msg": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "abort_campaign_msg"
      ],
      "properties": {
        "abort_campaign_msg": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Auth": {
      "type": "string",
      "enum": [
        "github"
      ]
    },
    "CampaignBudget": {
      "type": "object",
      "required": [
        "fee",
        "incentives"
      ],
      "properties": {
        "fee": {
          "$ref": "#/definitions/Coin"
        },
        "incentives": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ConversionDesc": {
      "type": "object",
      "required": [
        "kind",
        "proof"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/ConversionMechanism"
        },
        "proof": {
          "$ref": "#/definitions/ConversionProofMechanism"
        }
      },
      "additionalProperties": false
    },
    "ConversionMechanism": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "social"
          ],
          "properties": {
            "social": {
              "$ref": "#/definitions/Auth"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ConversionProofMechanism": {
      "type": "string",
      "enum": [
        "ed25519_signature"
      ]
    },
    "PayoutMechanism": {
      "type": "string",
      "enum": [
        "proportional_per_conversion"
      ]
    },
    "SegmentDesc": {
      "type": "object",
      "required": [
        "kind",
        "proof",
        "sources"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/SegmentKind"
        },
        "proof": {
          "$ref": "#/definitions/SegmentProofMechanism"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "SegmentKind": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "github_all_contributors"
          ]
        },
        {
          "type": "object",
          "required": [
            "github_top_n_contributors"
          ],
          "properties": {
            "github_top_n_contributors": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SegmentProofMechanism": {
      "type": "string",
      "enum": [
        "ed25519_signature"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
