name: CI
on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  cleanup-runs:
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    name: Cleanup old runs
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  lint-markdown:
    strategy:
      matrix:
        os: [ubuntu-latest]

    name: Lint Markdown
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - run: npm install

      - uses: xt0rted/markdownlint-problem-matcher@v2
      - run: npm run markdownlint

  lint-rust:
    strategy:
      matrix:
        os: [buildjet-8vcpu-ubuntu-2204]
        toolchain: [nightly]

    name: Lint Rust
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # FIXME(xla): Find a way to reliably cache the toolchain without leaving
      # using stale versions of it. Ideally we want to key by the rustc_hash
      # which is only known once we installed it.
      # - name: Cache toolchain
      #   uses: actions/cache@v3
      #   id: cache-toolchain
      #   continue-on-error: false
      #   with:
      #     path: |
      #       ~/.rustup/settings.toml
      #       ~/.rustup/toolchains/${{ matrix.toolchain }}-*
      #       ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
      #     key: rust-toolchain_${{ matrix.os }}-${{ steps.toolchain.outputs.rustc_hash }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, clippy, rustfmt
          override: true

      - name: Cache dependencies & tools
        uses: Swatinem/rust-cache@v2
        timeout-minutes: 1
        continue-on-error: true
        with:
          key: ${{ matrix.os }}

      - name: Run fmt check
        run: cargo fmt --all -- --check

      - name: Run clippy on worskpace
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: clippy
          args: --workspace --no-deps --all-features --all-targets -- -Dwarnings -Dnonstandard-style -Drust-2018-idioms -Dunused -Drust-2021-compatibility

  test-rust:
    strategy:
      matrix:
        os: [buildjet-8vcpu-ubuntu-2204]
        toolchain: [stable]

    name: Test Rust
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # FIXME(xla): Find a way to reliably cache the toolchain without leaving
      # using stale versions of it. Ideally we want to key by the rustc_hash
      # which is only known once we installed it.
      # - name: Cache toolchain
      #   uses: actions/cache@v3
      #   id: cache-toolchain
      #   continue-on-error: false
      #   with:
      #     path: |
      #       ~/.rustup/settings.toml
      #       ~/.rustup/toolchains/${{ matrix.toolchain }}-*
      #       ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
      #     key: rust-toolchain_${{ matrix.os }}-${{ steps.toolchain.outputs.rustc_hash }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, clippy, rustfmt
          override: true

      - name: Cache dependencies & tools
        uses: Swatinem/rust-cache@v2
        timeout-minutes: 1
        continue-on-error: true
        with:
          key: ${{ matrix.os }}

      - name: Install nextest
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-nextest

      - name: Install plz
        run: cargo install --force --path ./plz

      # FIXME(xla): The recompiles the entire workspace regardless if the
      # `target` directory was reconstructed from a cache. It's unclear as to
      # why that is.
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --workspace --all-features --all-targets
